const a={BLACKLIST:"blacklist",TIME_LIMITS:"timeLimits",DAILY_USAGE:"dailyUsage",POMODORO_STATUS:"pomodoroStatus",SITE_CUSTOMIZATIONS:"siteCustomizations",SETTINGS:"settings"},l={POMODORO:"pomodoroAlarm",USAGE_TRACKER:"usageTrackerAlarm",DAILY_SYNC:"dailySyncAlarm"},f={analyticsConsent:!1,productiveKeywords:["tutorial","documentation","study","learn","course","education","research","guide","reference","manual"],distractingKeywords:["news","entertainment","game","social","video","trending","viral","celebrity","gossip","meme"],notificationsEnabled:!0},T={focusMinutes:25,breakMinutes:5,longBreakMinutes:15,cyclesBeforeLongBreak:4,adaptiveMode:!1},M=.5,v=.5;let g=null,d=null,y=null;async function A(){console.log("[v0] Initializing usage tracker module"),await chrome.alarms.clear(l.USAGE_TRACKER),await chrome.alarms.create(l.USAGE_TRACKER,{periodInMinutes:v}),chrome.alarms.onAlarm.addListener(async e=>{e.name===l.USAGE_TRACKER&&await u()}),chrome.tabs.onActivated.addListener(async e=>{await u();try{const t=await chrome.tabs.get(e.tabId);m(t.id,t.url)}catch{console.warn(`Could not get tab info for tabId: ${e.tabId}`),S()}}),chrome.tabs.onUpdated.addListener(async(e,t,o)=>{e===y&&t.url&&(await u(),m(o.id,o.url))}),chrome.windows.onFocusChanged.addListener(async e=>{if(e===chrome.windows.WINDOW_ID_NONE)await u(),S();else{const[t]=await chrome.tabs.query({active:!0,windowId:e});t&&m(t.id,t.url)}});try{const[e]=await chrome.tabs.query({active:!0,currentWindow:!0});e!=null&&e.id&&e.url&&m(e.id,e.url)}catch(e){console.warn(`Could not query for active tab on startup: ${e}`)}}function m(e,t){if(!e||!t||t.startsWith("chrome://")||t.startsWith("chrome-extension://")||t.startsWith("about:")){S();return}y=e,g=t,d=Date.now()}function S(){y=null,g=null,d=null}async function u(){if(!g||!d)return;const e=C(g),t=Math.floor((Date.now()-d)/1e3);if(t<1){d=Date.now();return}const o=new Date().toISOString().split("T")[0],{[a.DAILY_USAGE]:i={}}=await chrome.storage.local.get(a.DAILY_USAGE);i[o]||(i[o]={}),i[o][e]=(i[o][e]||0)+t,await chrome.storage.local.set({[a.DAILY_USAGE]:i}),console.log("[v0] Recorded usage:",e,t,"seconds"),await r(),await U(e,i[o][e]),d=Date.now()}async function U(e,t){const{[a.TIME_LIMITS]:o=[]}=await chrome.storage.local.get(a.TIME_LIMITS),i=o.find(s=>s.domain===e);if(!i)return;const n=i.limitMinutes*60;if(t>=n){const s=e.split("").reduce((c,_)=>c+_.charCodeAt(0),3e3);await chrome.declarativeNetRequest.updateSessionRules({addRules:[{id:s,priority:2,action:{type:"block"},condition:{urlFilter:`||${e}`,resourceTypes:["main_frame"]}}]}),chrome.notifications.create(`limit-exceeded-${e}`,{type:"basic",iconUrl:"icons/icon48.png",title:"Limite de Tempo Atingido",message:`Você atingiu o limite de ${i.limitMinutes} minutos em ${e} hoje.`}),console.log(`[v0] Limite de tempo atingido para: ${e}. Regra de sessão adicionada.`)}}async function b(e,t){const{[a.TIME_LIMITS]:o=[]}=await chrome.storage.local.get(a.TIME_LIMITS),i=o.findIndex(n=>n.domain===e);if(t>0)i>=0?o[i].limitMinutes=t:o.push({domain:e,limitMinutes:t});else if(i>=0){o.splice(i,1);const n=e.split("").reduce((s,c)=>s+c.charCodeAt(0),3e3);await chrome.declarativeNetRequest.updateSessionRules({removeRuleIds:[n]})}await chrome.storage.local.set({[a.TIME_LIMITS]:o}),await r(),console.log("[v0] Time limit set/updated:",e,t,"minutes")}function C(e){try{return new URL(e).hostname.replace(/^www\./,"")}catch{return e}}async function h(){console.log("[v0] Initializing content analyzer module")}async function k(e){console.log("[v0] Content analysis result:",e);const{[a.SETTINGS]:t}=await chrome.storage.sync.get(a.SETTINGS);if(t!=null&&t.notificationsEnabled&&e.classification==="distracting"&&e.score>M){const o=P(e.url),{[a.BLACKLIST]:i=[]}=await chrome.storage.local.get(a.BLACKLIST);if(i.some(s=>s.domain===o))return;chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Site Potencialmente Distrativo",message:`${o} parece ser distrativo. Deseja adicioná-lo à sua lista de bloqueio?`,buttons:[{title:"Sim, bloquear"},{title:"Não, obrigado"}]})}}function P(e){try{return new URL(e).hostname}catch{return e}}async function r(){try{const e=await p();chrome.runtime.sendMessage({type:"STATE_UPDATED",payload:e})}catch(e){console.error("[v0] Error notifying state update:",e)}}async function p(){const e=[a.BLACKLIST,a.TIME_LIMITS,a.DAILY_USAGE,a.POMODORO_STATUS,a.SITE_CUSTOMIZATIONS],[t,o]=await Promise.all([chrome.storage.local.get(e),chrome.storage.sync.get(a.SETTINGS)]);return{blacklist:t[a.BLACKLIST]||[],timeLimits:t[a.TIME_LIMITS]||[],dailyUsage:t[a.DAILY_USAGE]||{},pomodoro:t[a.POMODORO_STATUS]||{state:"IDLE",timeRemaining:0,currentCycle:0,config:T},siteCustomizations:t[a.SITE_CUSTOMIZATIONS]||{},settings:o[a.SETTINGS]||f}}async function N(e,t){switch(e.type){case"GET_INITIAL_STATE":return await p();case"ADD_TO_BLACKLIST":return await B(e.payload.domain),{success:!0};case"REMOVE_FROM_BLACKLIST":return await G(e.payload.domain),{success:!0};case"START_POMODORO":return await z(e.payload),{success:!0};case"STOP_POMODORO":return await F(),{success:!0};case"SET_TIME_LIMIT":return await b(e.payload.domain,e.payload.limitMinutes),{success:!0};case"CONTENT_ANALYSIS_RESULT":return await k(e.payload),{success:!0};case"UPDATE_SETTINGS":const{settings:o}=await chrome.storage.sync.get(a.SETTINGS),i={...o,...e.payload};return await chrome.storage.sync.set({[a.SETTINGS]:i}),await r(),{success:!0};case"SITE_CUSTOMIZATION_UPDATED":const{siteCustomizations:n}=await chrome.storage.local.get(a.SITE_CUSTOMIZATIONS),s={...n,...e.payload};return await chrome.storage.local.set({[a.SITE_CUSTOMIZATIONS]:s}),await r(),{success:!0};case"STATE_UPDATED":return console.warn("[v0] Received a 'STATE_UPDATED' message from a client, which should not happen."),{success:!1,error:"Invalid message type received."};case"TOGGLE_ZEN_MODE":return console.log("Toggling Zen Mode with payload:",e.payload),{success:!0};default:const c=e.type;throw new Error(`Unknown message type: ${c}`)}}const O=1e3,I=2e3;async function L(){console.log("[v0] Initializing blocker module");const t=(await chrome.storage.local.get(a.BLACKLIST))[a.BLACKLIST]??[];await w(t)}async function B(e){const o=(await chrome.storage.local.get(a.BLACKLIST))[a.BLACKLIST]??[],i=e.replace(/^www\./,"");if(o.some(c=>c.domain===i)){console.log("[v0] Domain already in blacklist:",i);return}const n={domain:i,addedAt:Date.now()},s=[...o,n];await chrome.storage.local.set({[a.BLACKLIST]:s}),await w(s),await r(),console.log("[v0] Added to blacklist:",i)}async function G(e){const o=(await chrome.storage.local.get(a.BLACKLIST))[a.BLACKLIST]??[],i=e.replace(/^www\./,""),n=o.filter(s=>s.domain!==i);await chrome.storage.local.set({[a.BLACKLIST]:n}),await w(n),await r(),console.log("[v0] Removed from blacklist:",i)}async function w(e){const o=(await chrome.declarativeNetRequest.getDynamicRules()).map(n=>n.id),i=e.map((n,s)=>({id:I+s,priority:1,action:{type:"block"},condition:{urlFilter:`||${n.domain}`,resourceTypes:["main_frame"]}}));await chrome.declarativeNetRequest.updateDynamicRules({removeRuleIds:o.filter(n=>n>=I&&n<O),addRules:i}),console.log("[v0] User blocking rules synced:",i.length)}async function K(){const t=(await chrome.storage.local.get(a.BLACKLIST))[a.BLACKLIST]??[];if(t.length===0){console.log("[v0] No sites in blacklist to block for Pomodoro.");return}const o=t.map((i,n)=>({id:O+n,priority:2,action:{type:"block"},condition:{urlFilter:`||${i.domain}`,resourceTypes:["main_frame"]}}));await chrome.declarativeNetRequest.updateDynamicRules({addRules:o}),console.log("[v0] Enabling Pomodoro blocking for",t.length,"sites.")}async function E(){const t=(await chrome.declarativeNetRequest.getDynamicRules()).map(o=>o.id).filter(o=>o>=O&&o<I);t.length>0&&(await chrome.declarativeNetRequest.updateDynamicRules({removeRuleIds:t}),console.log("[v0] Pomodoro blocking disabled. Removed",t.length,"rules."))}async function D(){console.log("[v0] Initializing Pomodoro module"),chrome.alarms.onAlarm.addListener(async e=>{e.name===l.POMODORO&&await Y()})}async function z(e){const{[a.POMODORO_STATUS]:t}=await chrome.storage.local.get(a.POMODORO_STATUS),o={...T,...t==null?void 0:t.config,...e},i={state:"FOCUS",startTime:Date.now(),timeRemaining:o.focusMinutes*60,currentCycle:((t==null?void 0:t.currentCycle)||0)+1,config:o};await chrome.storage.local.set({[a.POMODORO_STATUS]:i}),await chrome.alarms.create(l.POMODORO,{delayInMinutes:o.focusMinutes}),await K(),await r(),o.notificationsEnabled!==!1&&chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Pomodoro Iniciado",message:`Foco por ${o.focusMinutes} minutos. Mantenha o foco!`}),console.log("[v0] Pomodoro started:",i)}async function F(){const{[a.POMODORO_STATUS]:e}=await chrome.storage.local.get(a.POMODORO_STATUS),t={state:"IDLE",timeRemaining:0,currentCycle:0,config:(e==null?void 0:e.config)||T,startTime:void 0};await chrome.storage.local.set({[a.POMODORO_STATUS]:t}),await chrome.alarms.clear(l.POMODORO),await E(),await r(),console.log("[v0] Pomodoro stopped")}async function Y(){const{[a.POMODORO_STATUS]:e}=await chrome.storage.local.get(a.POMODORO_STATUS);if(e){if(e.state==="FOCUS"){const o=e.currentCycle%e.config.cyclesBeforeLongBreak===0?e.config.longBreakMinutes:e.config.breakMinutes,i={...e,state:"BREAK",startTime:Date.now(),timeRemaining:o*60};await chrome.storage.local.set({[a.POMODORO_STATUS]:i}),await chrome.alarms.create(l.POMODORO,{delayInMinutes:o}),await E(),await r(),e.config.notificationsEnabled!==!1&&chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Pausa!",message:`Descanse por ${o} minutos. Você merece!`}),console.log("[v0] Pomodoro: Focus → Break")}else if(e.state==="BREAK"){e.config.adaptiveMode&&e.currentCycle%e.config.cyclesBeforeLongBreak===0&&(e.config.focusMinutes+=5,console.log("[v0] Adaptive mode: Focus time increased to",e.config.focusMinutes));const t={...e,state:"IDLE",timeRemaining:0,startTime:void 0};await chrome.storage.local.set({[a.POMODORO_STATUS]:t}),await r(),e.config.notificationsEnabled!==!1&&chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Ciclo Completo!",message:"Pronto para outra sessão de foco?"}),console.log("[v0] Pomodoro: Break → Idle")}}}async function R(){console.log("[v0] Initializing Firebase sync module");const{[a.SETTINGS]:e}=await chrome.storage.sync.get(a.SETTINGS);if(!(e!=null&&e.analyticsConsent)){console.log("[v0] Analytics consent not given, skipping Firebase sync");return}await chrome.alarms.create(l.DAILY_SYNC,{periodInMinutes:1440}),chrome.alarms.onAlarm.addListener(async t=>{t.name===l.DAILY_SYNC&&await x()})}async function x(){console.log("[v0] Daily sync triggered (Firebase integration pending)");const{[a.DAILY_USAGE]:e={}}=await chrome.storage.local.get(a.DAILY_USAGE),t=new Date().toISOString().split("T")[0],o=e[t];if(!o)return;const i=Object.values(o).reduce((s,c)=>s+c,0),n=Object.entries(o).sort(([,s],[,c])=>c-s).slice(0,5).map(([s,c])=>({domain:s,time:c}));console.log("[v0] Daily summary:",{totalTime:i,topSites:n})}console.log("[v0] Service Worker starting up...");chrome.runtime.onInstalled.addListener(async e=>{if(console.log("[v0] Extension installed/updated:",e.reason),e.reason==="install"){const t={blacklist:[],timeLimits:[],dailyUsage:{},siteCustomizations:{},settings:f},o={state:"IDLE",timeRemaining:0,currentCycle:0,config:T};await chrome.storage.local.set({[a.BLACKLIST]:t.blacklist,[a.TIME_LIMITS]:t.timeLimits,[a.DAILY_USAGE]:t.dailyUsage,[a.SITE_CUSTOMIZATIONS]:t.siteCustomizations,[a.POMODORO_STATUS]:o}),await chrome.storage.sync.set({[a.SETTINGS]:t.settings}),console.log("[v0] Initial state created")}await D(),await L(),await A(),await h(),await R()});chrome.runtime.onStartup.addListener(async()=>{console.log("[v0] Extension started"),await D(),await L(),await A(),await h(),await R()});chrome.runtime.onMessage.addListener((e,t,o)=>(console.log("[v0] Message received:",e.type,e.payload),N(e).then(o).catch(i=>{console.error("[v0] Error handling message:",i),o({error:i.message})}),!0));console.log("[v0] Service Worker loaded and listeners attached.");
