const o={BLACKLIST:"blacklist",TIME_LIMITS:"timeLimits",DAILY_USAGE:"dailyUsage",POMODORO_STATUS:"pomodoroStatus",SITE_CUSTOMIZATIONS:"siteCustomizations",SETTINGS:"settings"},c={POMODORO:"pomodoroAlarm",USAGE_TRACKER:"usageTrackerAlarm",DAILY_SYNC:"dailySyncAlarm"},S={analyticsConsent:!1,productiveKeywords:["tutorial","documentation","study","learn","course","education","research","guide","reference","manual"],distractingKeywords:["news","entertainment","game","social","video","trending","viral","celebrity","gossip","meme"],notificationsEnabled:!0},d={focusMinutes:25,breakMinutes:5,longBreakMinutes:15,cyclesBeforeLongBreak:4,adaptiveMode:!1},h=.5,E=.5;async function I(){console.log("[v0] Initializing blocker module");const{[o.BLACKLIST]:e=[]}=await chrome.storage.local.get(o.BLACKLIST);await m(e)}async function R(e){const{[o.BLACKLIST]:t=[]}=await chrome.storage.local.get(o.BLACKLIST);if(t.some(n=>n.domain===e)){console.log("[v0] Domain already in blacklist:",e);return}const a={domain:e,addedAt:Date.now()},i=[...t,a];await chrome.storage.local.set({[o.BLACKLIST]:i}),await m(i),console.log("[v0] Added to blacklist:",e)}async function M(e){const{[o.BLACKLIST]:t=[]}=await chrome.storage.local.get(o.BLACKLIST),a=t.filter(i=>i.domain!==e);await chrome.storage.local.set({[o.BLACKLIST]:a}),await m(a),console.log("[v0] Removed from blacklist:",e)}async function m(e){const a=(await chrome.declarativeNetRequest.getDynamicRules()).map(n=>n.id),i=e.map((n,s)=>({id:s+1,priority:1,action:{type:chrome.declarativeNetRequest.RuleActionType.BLOCK},condition:{urlFilter:`||${n.domain}`,resourceTypes:[chrome.declarativeNetRequest.ResourceType.MAIN_FRAME]}}));await chrome.declarativeNetRequest.updateDynamicRules({removeRuleIds:a,addRules:i}),console.log("[v0] Blocking rules synced:",i.length)}async function p(){const{[o.BLACKLIST]:e=[]}=await chrome.storage.local.get(o.BLACKLIST);await m(e),console.log("[v0] Pomodoro blocking enabled")}async function y(){const t=(await chrome.declarativeNetRequest.getDynamicRules()).map(a=>a.id);await chrome.declarativeNetRequest.updateDynamicRules({removeRuleIds:t,addRules:[]}),console.log("[v0] Pomodoro blocking disabled")}async function O(){console.log("[v0] Initializing Pomodoro module"),chrome.alarms.onAlarm.addListener(async e=>{e.name===c.POMODORO&&await v()})}async function _(e){var n;const{[o.POMODORO_STATUS]:t}=await chrome.storage.local.get(o.POMODORO_STATUS),a={...d,...t==null?void 0:t.config,...e},i={state:"FOCUS",timeRemaining:a.focusMinutes*60,currentCycle:((t==null?void 0:t.currentCycle)||0)+1,config:a};await chrome.storage.local.set({[o.POMODORO_STATUS]:i}),await chrome.alarms.create(c.POMODORO,{delayInMinutes:a.focusMinutes}),await p(),((n=t==null?void 0:t.config)==null?void 0:n.notificationsEnabled)!==!1&&chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Pomodoro Iniciado",message:`Foco por ${a.focusMinutes} minutos. Mantenha o foco!`}),console.log("[v0] Pomodoro started:",i)}async function D(){const e={state:"IDLE",timeRemaining:0,currentCycle:0,config:d};await chrome.storage.local.set({[o.POMODORO_STATUS]:e}),await chrome.alarms.clear(c.POMODORO),await y(),console.log("[v0] Pomodoro stopped")}async function v(){const{[o.POMODORO_STATUS]:e}=await chrome.storage.local.get(o.POMODORO_STATUS);if(e){if(e.state==="FOCUS"){const a=e.currentCycle%e.config.cyclesBeforeLongBreak===0?e.config.longBreakMinutes:e.config.breakMinutes,i={state:"BREAK",timeRemaining:a*60,currentCycle:e.currentCycle,config:e.config};await chrome.storage.local.set({[o.POMODORO_STATUS]:i}),await chrome.alarms.create(c.POMODORO,{delayInMinutes:a}),await y(),chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Pausa!",message:`Descanse por ${a} minutos. Você merece!`}),console.log("[v0] Pomodoro: Focus → Break")}else if(e.state==="BREAK"){e.config.adaptiveMode&&e.currentCycle%e.config.cyclesBeforeLongBreak===0&&(e.config.focusMinutes+=5,console.log("[v0] Adaptive mode: Focus time increased to",e.config.focusMinutes));const t={state:"IDLE",timeRemaining:0,currentCycle:e.currentCycle,config:e.config};await chrome.storage.local.set({[o.POMODORO_STATUS]:t}),chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Ciclo Completo!",message:"Pronto para outra sessão de foco?"}),console.log("[v0] Pomodoro: Break → Idle")}}}let u=null,l=null;async function A(){console.log("[v0] Initializing usage tracker module"),await chrome.alarms.create(c.USAGE_TRACKER,{periodInMinutes:E}),chrome.alarms.onAlarm.addListener(async t=>{t.name===c.USAGE_TRACKER&&await T()}),chrome.tabs.onActivated.addListener(async t=>{await T();const a=await chrome.tabs.get(t.tabId);g(a.url)}),chrome.tabs.onUpdated.addListener(async(t,a)=>{if(a.url){const[i]=await chrome.tabs.query({active:!0,currentWindow:!0});(i==null?void 0:i.id)===t&&(await T(),g(a.url))}});const[e]=await chrome.tabs.query({active:!0,currentWindow:!0});e!=null&&e.url&&g(e.url)}function g(e){if(!e||e.startsWith("chrome://")||e.startsWith("chrome-extension://")){u=null,l=null;return}u=e,l=Date.now(),console.log("[v0] Started tracking:",L(e))}async function T(){if(!u||!l)return;const e=L(u),t=Math.floor((Date.now()-l)/1e3);if(t<1)return;const a=new Date().toISOString().split("T")[0],{[o.DAILY_USAGE]:i={}}=await chrome.storage.local.get(o.DAILY_USAGE);i[a]||(i[a]={}),i[a][e]=(i[a][e]||0)+t,await chrome.storage.local.set({[o.DAILY_USAGE]:i}),console.log("[v0] Recorded usage:",e,t,"seconds"),await C(e,i[a][e]),l=Date.now()}async function C(e,t){const{[o.TIME_LIMITS]:a=[]}=await chrome.storage.local.get(o.TIME_LIMITS),i=a.find(s=>s.domain===e);if(!i)return;const n=i.limitMinutes*60;if(t>=n){const s=Math.floor(Math.random()*Date.now());await chrome.declarativeNetRequest.updateSessionRules({addRules:[{id:s,priority:2,action:{type:chrome.declarativeNetRequest.RuleActionType.BLOCK},condition:{urlFilter:`||${e}`,resourceTypes:[chrome.declarativeNetRequest.ResourceType.MAIN_FRAME]}}]}),chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Limite de Tempo Atingido",message:`Você atingiu o limite de ${i.limitMinutes} minutos em ${e} hoje.`}),console.log(`[v0] Limite de tempo atingido para: ${e}. Regra de sessão adicionada.`)}}async function U(e,t){const{[o.TIME_LIMITS]:a=[]}=await chrome.storage.local.get(o.TIME_LIMITS),i=a.findIndex(n=>n.domain===e);i>=0?a[i].limitMinutes=t:a.push({domain:e,limitMinutes:t}),await chrome.storage.local.set({[o.TIME_LIMITS]:a}),console.log("[v0] Time limit set:",e,t,"minutes")}function L(e){try{return new URL(e).hostname}catch{return e}}async function f(){console.log("[v0] Initializing content analyzer module")}async function b(e){console.log("[v0] Content analysis result:",e);const{[o.SETTINGS]:t}=await chrome.storage.sync.get(o.SETTINGS);if(t!=null&&t.notificationsEnabled&&e.classification==="distracting"&&e.score>h){const a=k(e.url),{[o.BLACKLIST]:i=[]}=await chrome.storage.local.get(o.BLACKLIST);if(i.some(s=>s.domain===a))return;chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Site Potencialmente Distrativo",message:`${a} parece ser distrativo. Deseja adicioná-lo à sua lista de bloqueio?`,buttons:[{title:"Sim, bloquear"},{title:"Não, obrigado"}]})}}function k(e){try{return new URL(e).hostname}catch{return e}}async function w(){console.log("[v0] Initializing Firebase sync module");const{[o.SETTINGS]:e}=await chrome.storage.sync.get(o.SETTINGS);if(!(e!=null&&e.analyticsConsent)){console.log("[v0] Analytics consent not given, skipping Firebase sync");return}await chrome.alarms.create(c.DAILY_SYNC,{periodInMinutes:1440}),chrome.alarms.onAlarm.addListener(async t=>{t.name===c.DAILY_SYNC&&await B()})}async function B(){console.log("[v0] Daily sync triggered (Firebase integration pending)");const{[o.DAILY_USAGE]:e={}}=await chrome.storage.local.get(o.DAILY_USAGE),t=new Date().toISOString().split("T")[0],a=e[t];if(!a)return;const i=Object.values(a).reduce((s,r)=>s+r,0),n=Object.entries(a).sort(([,s],[,r])=>r-s).slice(0,5).map(([s,r])=>({domain:s,time:r}));console.log("[v0] Daily summary:",{totalTime:i,topSites:n})}async function P(e,t){switch(e.type){case"GET_INITIAL_STATE":return await N();case"ADD_TO_BLACKLIST":return await R(e.payload.domain),{success:!0};case"REMOVE_FROM_BLACKLIST":return await M(e.payload.domain),{success:!0};case"START_POMODORO":return await _(e.payload),{success:!0};case"STOP_POMODORO":return await D(),{success:!0};case"SET_TIME_LIMIT":return await U(e.payload.domain,e.payload.limitMinutes),{success:!0};case"CONTENT_ANALYSIS_RESULT":return await b(e.payload),{success:!0};case"TOGGLE_ZEN_MODE":return{success:!0};case"UPDATE_SETTINGS":return await chrome.storage.sync.set({[o.SETTINGS]:e.payload}),{success:!0};case"SITE_CUSTOMIZATION_UPDATED":return await chrome.storage.local.set({[o.SITE_CUSTOMIZATIONS]:e.payload}),{success:!0};case"STATE_UPDATED":return console.warn("[v0] Received a 'STATE_UPDATED' message, which should not happen."),{success:!1,error:"Invalid message type received."};default:const a=e.type;throw new Error(`Unknown message type: ${a}`)}}async function N(){const[e,t]=await Promise.all([chrome.storage.local.get([o.BLACKLIST,o.TIME_LIMITS,o.DAILY_USAGE,o.POMODORO_STATUS,o.SITE_CUSTOMIZATIONS]),chrome.storage.sync.get([o.SETTINGS])]);return{blacklist:e[o.BLACKLIST]||[],timeLimits:e[o.TIME_LIMITS]||[],dailyUsage:e[o.DAILY_USAGE]||{},pomodoro:e[o.POMODORO_STATUS]||{state:"IDLE",timeRemaining:0,currentCycle:0,config:d},siteCustomizations:e[o.SITE_CUSTOMIZATIONS]||{},settings:t[o.SETTINGS]||S}}console.log("[v0] Service Worker starting up...");chrome.runtime.onInstalled.addListener(async e=>{if(console.log("[v0] Extension installed/updated:",e.reason),e.reason==="install"){const t={blacklist:[],timeLimits:[],dailyUsage:{},siteCustomizations:{},settings:S},a={state:"IDLE",timeRemaining:0,currentCycle:0,config:d};await chrome.storage.local.set({[o.BLACKLIST]:t.blacklist,[o.TIME_LIMITS]:t.timeLimits,[o.DAILY_USAGE]:t.dailyUsage,[o.SITE_CUSTOMIZATIONS]:t.siteCustomizations,[o.POMODORO_STATUS]:a}),await chrome.storage.sync.set({[o.SETTINGS]:t.settings}),console.log("[v0] Initial state created")}await O(),await I(),await A(),await f(),await w()});chrome.runtime.onStartup.addListener(async()=>{console.log("[v0] Extension started"),await O(),await I(),await A(),await f(),await w()});chrome.runtime.onMessage.addListener((e,t,a)=>(console.log("[v0] Message received:",e.type,e.payload),P(e).then(a).catch(i=>{console.error("[v0] Error handling message:",i),a({error:i.message})}),!0));console.log("[v0] Service Worker loaded and listeners attached.");
