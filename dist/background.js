const a={BLACKLIST:"blacklist",TIME_LIMITS:"timeLimits",DAILY_USAGE:"dailyUsage",POMODORO_STATUS:"pomodoroStatus",SITE_CUSTOMIZATIONS:"siteCustomizations",SETTINGS:"settings",CURRENTLY_TRACKING:"currentlyTracking"},c={POMODORO:"pomodoroAlarm",USAGE_TRACKER:"usageTrackerAlarm",DAILY_SYNC:"dailySyncAlarm"},E={analyticsConsent:!1,productiveKeywords:["tutorial","documentation","study","learn","course","education","research","guide","reference","manual"],distractingKeywords:["news","entertainment","game","social","video","trending","viral","celebrity","gossip","meme"],notificationsEnabled:!0},u={focusMinutes:25,breakMinutes:5,longBreakMinutes:15,cyclesBeforeLongBreak:4,adaptiveMode:!1},G=.5,K=1;function m(e){try{return new URL(e.startsWith("http")?e:`https://${e}`).hostname.replace(/^www\./,"")}catch{return e.replace(/^www\./,"")}}function p(e){try{return new URL(e).hostname.replace(/^www\./,"")}catch{return e.replace(/^www\./,"")}}let w=null,L=!1;const y=3e3;let R=!1;async function _(){if(R)return;R=!0,await chrome.alarms.clear(c.DAILY_SYNC);const e=60*24;await chrome.alarms.create(c.DAILY_SYNC,{periodInMinutes:e}),chrome.alarms.onAlarm.addListener(async t=>{t.name===c.DAILY_SYNC&&await Y()})}async function Y(){const{[a.TIME_LIMITS]:e=[]}=await chrome.storage.local.get(a.TIME_LIMITS);if(!e||e.length===0)return;const t=e.map(o=>o.domain.split("").reduce((i,n)=>i+n.charCodeAt(0),y));t.length&&await chrome.declarativeNetRequest.updateSessionRules({removeRuleIds:t})}async function D(){L||(L=!0,console.log("[v0] Initializing usage tracker module"),await chrome.alarms.clear(c.USAGE_TRACKER),await chrome.alarms.create(c.USAGE_TRACKER,{periodInMinutes:K}),chrome.alarms.onAlarm.addListener(async e=>{e.name===c.USAGE_TRACKER&&await g()}),chrome.tabs.onActivated.addListener(z),chrome.tabs.onUpdated.addListener(F),chrome.windows.onFocusChanged.addListener(x),await M())}async function z(e){await g();try{const t=await chrome.tabs.get(e.tabId);await f(t.id,t.url)}catch{console.warn(`[v0] Could not get tab info for tabId: ${e.tabId}`),await h()}}async function F(e,t){e===w&&t.url&&(await g(),await f(e,t.url))}async function x(e){e===chrome.windows.WINDOW_ID_NONE?(await g(),await h()):await M()}async function M(){const[e]=await chrome.tabs.query({active:!0,currentWindow:!0});e!=null&&e.id&&e.url&&await f(e.id,e.url)}async function f(e,t){if(!e||!t||t.startsWith("chrome://")||t.startsWith("chrome-extension://")||t.startsWith("about:")){await h();return}w=e;const o={url:t,startTime:Date.now()};await chrome.storage.session.set({[a.CURRENTLY_TRACKING]:o})}async function h(){w=null,await chrome.storage.session.remove(a.CURRENTLY_TRACKING)}async function g(){const t=(await chrome.storage.session.get(a.CURRENTLY_TRACKING))[a.CURRENTLY_TRACKING];if(!t||!t.url||!t.startTime)return;const o=p(t.url),i=Math.floor((Date.now()-t.startTime)/1e3);if(t.startTime=Date.now(),await chrome.storage.session.set({[a.CURRENTLY_TRACKING]:t}),i<1)return;const n=new Date().toISOString().split("T")[0],{[a.DAILY_USAGE]:s={}}=await chrome.storage.local.get(a.DAILY_USAGE);s[n]||(s[n]={}),s[n][o]=(s[n][o]||0)+i,await chrome.storage.local.set({[a.DAILY_USAGE]:s}),console.log("[v0] Recorded usage:",o,i,"seconds"),await l(),await $(o,s[n][o])}async function $(e,t){const{[a.TIME_LIMITS]:o=[]}=await chrome.storage.local.get(a.TIME_LIMITS),i=o.find(s=>s.domain===e);if(!i)return;const n=i.limitMinutes*60;if(t>=n){const s=e.split("").reduce((r,T)=>r+T.charCodeAt(0),y);await chrome.declarativeNetRequest.updateSessionRules({removeRuleIds:[s],addRules:[{id:s,priority:3,action:{type:"block"},condition:{urlFilter:`||${e}`,resourceTypes:["main_frame"]}}]}),await v()&&chrome.notifications.create(`limit-exceeded-${e}`,{type:"basic",iconUrl:"icons/icon48.png",title:"Limite de Tempo Atingido",message:`Você atingiu o limite de ${i.limitMinutes} minutos em ${e} hoje.`}),console.log(`[v0] Limite de tempo atingido para: ${e}. Regra de sessão adicionada.`)}}async function q(e,t){const o=m(e),{[a.TIME_LIMITS]:i=[]}=await chrome.storage.local.get(a.TIME_LIMITS),n=i.findIndex(s=>s.domain===o);if(t>0)n>=0?i[n].limitMinutes=t:i.push({domain:o,limitMinutes:t});else if(n>=0){i.splice(n,1);const s=o.split("").reduce((r,T)=>r+T.charCodeAt(0),y);await chrome.declarativeNetRequest.updateSessionRules({removeRuleIds:[s]})}await chrome.storage.local.set({[a.TIME_LIMITS]:i}),await l(),console.log("[v0] Time limit set/updated:",o,t,"minutes")}async function C(){console.log("[v0] Initializing content analyzer module")}async function W(e){console.log("[v0] Content analysis result:",e);const{[a.SETTINGS]:t}=await chrome.storage.sync.get(a.SETTINGS);if(t!=null&&t.notificationsEnabled&&e.classification==="distracting"&&e.score>G){const o=p(e.url),{[a.BLACKLIST]:i=[]}=await chrome.storage.local.get(a.BLACKLIST);if(i.some(s=>s.domain===o))return;await v()&&chrome.notifications.create(`suggest-block-${o}`,{type:"basic",iconUrl:"icons/icon48.png",title:"Site Potencialmente Distrativo",message:`${o} parece ser distrativo. Deseja adicioná-lo à sua lista de bloqueio?`,buttons:[{title:"Sim, bloquear"},{title:"Não, obrigado"}]})}}async function l(){try{const e=await U();chrome.runtime.sendMessage({type:"STATE_UPDATED",payload:e})}catch(e){console.error("[v0] Error notifying state update:",e)}}async function v(){try{const{[a.SETTINGS]:e}=await chrome.storage.sync.get(a.SETTINGS);return(e==null?void 0:e.notificationsEnabled)!==!1}catch{return!0}}async function U(){const e=[a.BLACKLIST,a.TIME_LIMITS,a.DAILY_USAGE,a.POMODORO_STATUS,a.SITE_CUSTOMIZATIONS],[t,o]=await Promise.all([chrome.storage.local.get(e),chrome.storage.sync.get(a.SETTINGS)]);return{blacklist:t[a.BLACKLIST]||[],timeLimits:t[a.TIME_LIMITS]||[],dailyUsage:t[a.DAILY_USAGE]||{},pomodoro:t[a.POMODORO_STATUS]||{state:"IDLE",timeRemaining:0,currentCycle:0,config:u},siteCustomizations:t[a.SITE_CUSTOMIZATIONS]||{},settings:o[a.SETTINGS]||E}}async function Z(e,t){switch(e.type){case"GET_INITIAL_STATE":return await U();case"ADD_TO_BLACKLIST":return await V(e.payload.domain),{success:!0};case"REMOVE_FROM_BLACKLIST":return await H(e.payload.domain),{success:!0};case"START_POMODORO":return await J(e.payload),{success:!0};case"STOP_POMODORO":return await X(),{success:!0};case"SET_TIME_LIMIT":return await q(e.payload.domain,e.payload.limitMinutes),{success:!0};case"CONTENT_ANALYSIS_RESULT":return await W(e.payload),{success:!0};case"UPDATE_SETTINGS":{const{[a.SETTINGS]:i}=await chrome.storage.sync.get(a.SETTINGS),n={...i??{},...e.payload};return await chrome.storage.sync.set({[a.SETTINGS]:n}),await l(),{success:!0}}case"SITE_CUSTOMIZATION_UPDATED":{const{[a.SITE_CUSTOMIZATIONS]:i}=await chrome.storage.local.get(a.SITE_CUSTOMIZATIONS),n={...i??{},...e.payload};return await chrome.storage.local.set({[a.SITE_CUSTOMIZATIONS]:n}),await l(),{success:!0}}case"STATE_UPDATED":return console.warn("[v0] Received a 'STATE_UPDATED' message from a client, which should not happen."),{success:!1,error:"Invalid message type received."};case"TOGGLE_ZEN_MODE":{const[i]=await chrome.tabs.query({active:!0,currentWindow:!0});if(i!=null&&i.id)try{await chrome.tabs.sendMessage(i.id,{type:"TOGGLE_ZEN_MODE",payload:e.payload})}catch(n){console.warn(`[v0] Could not send message to tab ${i.id}. It might be a protected page or the content script is not injected.`,n)}return{success:!0}}default:const o=e.type;throw new Error(`Unknown message type: ${o}`)}}const I=1e3,d=2e3,N=1e3,j=e=>{const t=[...e].reduce((o,i)=>o*31+i.charCodeAt(0)>>>0,0);return d+t%N};let S=Promise.resolve();function A(e){return S=S.then(e,e),S}async function b(){console.log("[v0] Initializing blocker module");const t=(await chrome.storage.local.get(a.BLACKLIST))[a.BLACKLIST]??[];await O(t)}async function V(e){const o=(await chrome.storage.local.get(a.BLACKLIST))[a.BLACKLIST]??[],i=m(e);if(o.some(r=>r.domain===i)){console.log("[v0] Domain already in blacklist:",i);return}const n={domain:i,addedAt:Date.now()},s=[...o,n];await chrome.storage.local.set({[a.BLACKLIST]:s}),await O(s),await l(),console.log("[v0] Added to blacklist:",i)}async function H(e){const o=(await chrome.storage.local.get(a.BLACKLIST))[a.BLACKLIST]??[],i=m(e),n=o.filter(s=>s.domain!==i);await chrome.storage.local.set({[a.BLACKLIST]:n}),await O(n),await l(),console.log("[v0] Removed from blacklist:",i)}async function O(e){const o=(await chrome.declarativeNetRequest.getDynamicRules()).map(n=>n.id).filter(n=>n>=d&&n<d+N),i=e.map(n=>{const s=m(n.domain);return{id:j(s),priority:1,action:{type:"block"},condition:{urlFilter:`||${s}`,resourceTypes:["main_frame"]}}});await A(()=>chrome.declarativeNetRequest.updateDynamicRules({removeRuleIds:o,addRules:i})),console.log("[v0] User blocking rules synced:",i.length,"rules added,",o.length,"rules removed.")}async function Q(){const{[a.BLACKLIST]:e=[]}=await chrome.storage.local.get(a.BLACKLIST);if(e.length===0){console.log("[v0] No sites in blacklist to block for Pomodoro.");return}const o=(await chrome.declarativeNetRequest.getDynamicRules()).map(n=>n.id).filter(n=>n>=I&&n<d),i=e.map((n,s)=>({id:I+s,priority:2,action:{type:"block"},condition:{urlFilter:`||${m(n.domain)}`,resourceTypes:["main_frame"]}}));await A(()=>chrome.declarativeNetRequest.updateDynamicRules({removeRuleIds:o,addRules:i})),console.log("[v0] Enabling Pomodoro blocking for",e.length,"sites.")}async function k(){const t=(await chrome.declarativeNetRequest.getDynamicRules()).map(o=>o.id).filter(o=>o>=I&&o<d);t.length>0&&(await A(()=>chrome.declarativeNetRequest.updateDynamicRules({removeRuleIds:t})),console.log("[v0] Pomodoro blocking disabled. Removed",t.length,"rules."))}async function P(){console.log("[v0] Initializing Pomodoro module"),chrome.alarms.onAlarm.addListener(async e=>{e.name===c.POMODORO&&await ee()})}async function J(e){const{[a.POMODORO_STATUS]:t}=await chrome.storage.local.get(a.POMODORO_STATUS),o={...u,...t==null?void 0:t.config,...e},i={state:"FOCUS",startTime:Date.now(),timeRemaining:o.focusMinutes*60,currentCycle:((t==null?void 0:t.currentCycle)||0)+1,config:o};await chrome.storage.local.set({[a.POMODORO_STATUS]:i}),await chrome.alarms.create(c.POMODORO,{delayInMinutes:o.focusMinutes}),await Q(),await l(),o.notificationsEnabled!==!1&&chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Pomodoro Iniciado",message:`Foco por ${o.focusMinutes} minutos. Mantenha o foco!`}),console.log("[v0] Pomodoro started:",i)}async function X(){const{[a.POMODORO_STATUS]:e}=await chrome.storage.local.get(a.POMODORO_STATUS),t={state:"IDLE",timeRemaining:0,currentCycle:0,config:(e==null?void 0:e.config)||u,startTime:void 0};await chrome.storage.local.set({[a.POMODORO_STATUS]:t}),await chrome.alarms.clear(c.POMODORO),await k(),await l(),console.log("[v0] Pomodoro stopped")}async function ee(){const{[a.POMODORO_STATUS]:e}=await chrome.storage.local.get(a.POMODORO_STATUS);if(e){if(e.state==="FOCUS"){const o=e.currentCycle%e.config.cyclesBeforeLongBreak===0?e.config.longBreakMinutes:e.config.breakMinutes,i={...e,state:"BREAK",startTime:Date.now(),timeRemaining:o*60};await chrome.storage.local.set({[a.POMODORO_STATUS]:i}),await chrome.alarms.create(c.POMODORO,{delayInMinutes:o}),await k(),await l(),e.config.notificationsEnabled!==!1&&chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Pausa!",message:`Descanse por ${o} minutos. Você merece!`}),console.log("[v0] Pomodoro: Focus → Break")}else if(e.state==="BREAK"){e.config.adaptiveMode&&e.currentCycle%e.config.cyclesBeforeLongBreak===0&&(e.config.focusMinutes+=5,console.log("[v0] Adaptive mode: Focus time increased to",e.config.focusMinutes));const t={...e,state:"IDLE",timeRemaining:0,startTime:void 0};await chrome.storage.local.set({[a.POMODORO_STATUS]:t}),await l(),e.config.notificationsEnabled!==!1&&chrome.notifications.create({type:"basic",iconUrl:"icons/icon48.png",title:"Ciclo Completo!",message:"Pronto para outra sessão de foco?"}),console.log("[v0] Pomodoro: Break → Idle")}}}async function B(){console.log("[v0] Initializing Firebase sync module");const{[a.SETTINGS]:e}=await chrome.storage.sync.get(a.SETTINGS);if(!(e!=null&&e.analyticsConsent)){console.log("[v0] Analytics consent not given, skipping Firebase sync");return}await chrome.alarms.create(c.DAILY_SYNC,{periodInMinutes:1440}),chrome.alarms.onAlarm.addListener(async t=>{t.name===c.DAILY_SYNC&&await te()})}async function te(){console.log("[v0] Daily sync triggered (Firebase integration pending)");const{[a.DAILY_USAGE]:e={}}=await chrome.storage.local.get(a.DAILY_USAGE),t=new Date().toISOString().split("T")[0],o=e[t];if(!o)return;const i=Object.values(o).reduce((s,r)=>s+r,0),n=Object.entries(o).sort(([,s],[,r])=>r-s).slice(0,5).map(([s,r])=>({domain:s,time:r}));console.log("[v0] Daily summary:",{totalTime:i,topSites:n})}console.log("[v0] Service Worker starting up...");chrome.runtime.onInstalled.addListener(async e=>{if(console.log("[v0] Extension installed/updated:",e.reason),e.reason==="install"){const t={blacklist:[],timeLimits:[],dailyUsage:{},siteCustomizations:{},settings:E},o={state:"IDLE",timeRemaining:0,currentCycle:0,config:u};await chrome.storage.local.set({[a.BLACKLIST]:t.blacklist,[a.TIME_LIMITS]:t.timeLimits,[a.DAILY_USAGE]:t.dailyUsage,[a.SITE_CUSTOMIZATIONS]:t.siteCustomizations,[a.POMODORO_STATUS]:o}),await chrome.storage.sync.set({[a.SETTINGS]:t.settings}),console.log("[v0] Initial state created")}await P(),await b(),await D(),await _(),await C(),await B()});chrome.runtime.onStartup.addListener(async()=>{console.log("[v0] Extension started"),await P(),await b(),await D(),await _(),await C(),await B()});chrome.runtime.onMessage.addListener((e,t,o)=>(console.log("[v0] Message received:",e.type,e.payload),Z(e).then(o).catch(i=>{console.error("[v0] Error handling message:",i),o({error:i.message})}),!0));console.log("[v0] Service Worker loaded and listeners attached.");
