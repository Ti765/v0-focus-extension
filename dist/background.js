const o={BLACKLIST:"blacklist",TIME_LIMITS:"timeLimits",DAILY_USAGE:"dailyUsage",POMODORO_STATUS:"pomodoroStatus",SITE_CUSTOMIZATIONS:"siteCustomizations",SETTINGS:"settings",CURRENTLY_TRACKING:"currentlyTracking"},c={POMODORO:"pomodoroAlarm",USAGE_TRACKER:"usageTrackerAlarm",DAILY_SYNC:"dailySyncAlarm"},L={analyticsConsent:!1,productiveKeywords:["tutorial","documentation","study","learn","course","education","research","guide","reference","manual"],distractingKeywords:["news","entertainment","game","social","video","trending","viral","celebrity","gossip","meme"],notificationsEnabled:!0},m={focusMinutes:25,breakMinutes:5,longBreakMinutes:15,cyclesBeforeLongBreak:4,adaptiveMode:!1},N=.5,U=1;function u(e){if(!e)return"";let t=e.trim();try{return new URL(t.startsWith("http")?t:`https://${t}`).hostname.replace(/^www\./,"")}catch{return t.split("/")[0].replace(/^www\./,"")}}function E(e){if(!e)return"";try{return new URL(e).hostname.replace(/^www\./,"")}catch{return u(e)}}let y=null,R=!1,O=!1;const w=3e3;async function k(){if(O)return;O=!0,await chrome.alarms.clear(c.DAILY_SYNC);const e=60*24;await chrome.alarms.create(c.DAILY_SYNC,{periodInMinutes:e}),chrome.alarms.onAlarm.addListener(async t=>{t.name===c.DAILY_SYNC&&await P()})}async function P(){const{[o.TIME_LIMITS]:e=[]}=await chrome.storage.local.get(o.TIME_LIMITS);if(!e||e.length===0)return;const t=e.map(a=>a.domain.split("").reduce((i,n)=>i+n.charCodeAt(0),w));t.length&&await chrome.declarativeNetRequest.updateSessionRules({removeRuleIds:t})}async function B(){R||(R=!0,console.log("[v0] Initializing usage tracker module"),await chrome.alarms.clear(c.USAGE_TRACKER),await chrome.alarms.create(c.USAGE_TRACKER,{periodInMinutes:U}),chrome.alarms.onAlarm.addListener(async e=>{e.name===c.USAGE_TRACKER&&await g()}),chrome.tabs.onActivated.addListener(G),chrome.tabs.onUpdated.addListener(K),chrome.windows.onFocusChanged.addListener(Y),await _())}async function G(e){await g();try{const t=await chrome.tabs.get(e.tabId);await f(t.id,t.url)}catch{console.warn(`[v0] Could not get tab info for tabId: ${e.tabId}`),await h()}}async function K(e,t){e===y&&t.url&&(await g(),await f(e,t.url))}async function Y(e){e===chrome.windows.WINDOW_ID_NONE?(await g(),await h()):await _()}async function _(){const[e]=await chrome.tabs.query({active:!0,currentWindow:!0});e?.id&&e.url&&await f(e.id,e.url)}async function f(e,t){if(!e||!t||t.startsWith("chrome://")||t.startsWith("chrome-extension://")||t.startsWith("about:")){await h();return}y=e;const a={url:t,startTime:Date.now()};await chrome.storage.session.set({[o.CURRENTLY_TRACKING]:a})}async function h(){y=null,await chrome.storage.session.remove(o.CURRENTLY_TRACKING)}async function g(){const t=(await chrome.storage.session.get(o.CURRENTLY_TRACKING))[o.CURRENTLY_TRACKING];if(!t||!t.url||!t.startTime)return;const a=E(t.url),i=Math.floor((Date.now()-t.startTime)/1e3);if(t.startTime=Date.now(),await chrome.storage.session.set({[o.CURRENTLY_TRACKING]:t}),i<1)return;const n=new Date().toISOString().split("T")[0],{[o.DAILY_USAGE]:s={}}=await chrome.storage.local.get(o.DAILY_USAGE);s[n]||(s[n]={}),s[n][a]=(s[n][a]||0)+i,await chrome.storage.local.set({[o.DAILY_USAGE]:s}),console.log("[v0] Recorded usage:",a,i,"seconds"),await l(),await z(a,s[n][a])}async function z(e,t){const{[o.TIME_LIMITS]:a=[]}=await chrome.storage.local.get(o.TIME_LIMITS),i=a.find(s=>s.domain===e);if(!i)return;const n=i.limitMinutes*60;if(t>=n){const s=e.split("").reduce((r,T)=>r+T.charCodeAt(0),w);await chrome.declarativeNetRequest.updateSessionRules({removeRuleIds:[s],addRules:[{id:s,priority:3,action:{type:chrome.declarativeNetRequest.RuleActionType.BLOCK},condition:{urlFilter:`||${e}`,resourceTypes:[chrome.declarativeNetRequest.ResourceType.MAIN_FRAME]}}]}),await x()&&chrome.notifications.create(`limit-exceeded-${e}`,{type:"basic",iconUrl:"icons/icon48.png",title:"Limite de Tempo Atingido",message:`Você atingiu o limite de ${i.limitMinutes} minutos em ${e} hoje.`}),console.log(`[v0] Limite de tempo atingido para: ${e}. Regra de sessão adicionada.`)}}async function F(e,t){const a=u(e);if(!a)return;const{[o.TIME_LIMITS]:i=[]}=await chrome.storage.local.get(o.TIME_LIMITS),n=i.findIndex(s=>s.domain===a);if(t>0)n>=0?i[n].limitMinutes=t:i.push({domain:a,limitMinutes:t});else if(n>=0){i.splice(n,1);const s=a.split("").reduce((r,T)=>r+T.charCodeAt(0),w);await chrome.declarativeNetRequest.updateSessionRules({removeRuleIds:[s]})}await chrome.storage.local.set({[o.TIME_LIMITS]:i}),await l(),console.log("[v0] Time limit set/updated:",a,t,"minutes")}async function q(){console.log("[v0] Initializing content analyzer module")}async function $(e){console.log("[v0] Content analysis result:",e);const{[o.SETTINGS]:t}=await chrome.storage.sync.get(o.SETTINGS);if(t?.notificationsEnabled&&e.classification==="distracting"&&e.score>N){const a=E(e.url);if(!a)return;const{[o.BLACKLIST]:i=[]}=await chrome.storage.local.get(o.BLACKLIST);if(i.some(s=>s.domain===a))return;chrome.notifications.create(`suggest-block-${a}`,{type:"basic",iconUrl:"icons/icon48.png",title:"Site Potencialmente Distrativo",message:`${a} parece ser distrativo. Deseja adicioná-lo à sua lista de bloqueio?`,buttons:[{title:"Sim, bloquear"},{title:"Não, obrigado"}]})}}async function l(){try{const e=await D();chrome.runtime.sendMessage({type:"STATE_UPDATED",payload:e})}catch(e){console.error("[v0] Error notifying state update:",e)}}async function x(){try{const{[o.SETTINGS]:e}=await chrome.storage.sync.get(o.SETTINGS);return e?.notificationsEnabled!==!1}catch{return!0}}async function D(){const e=[o.BLACKLIST,o.TIME_LIMITS,o.DAILY_USAGE,o.POMODORO_STATUS,o.SITE_CUSTOMIZATIONS],[t,a]=await Promise.all([chrome.storage.local.get(e),chrome.storage.sync.get(o.SETTINGS)]);return{blacklist:t[o.BLACKLIST]||[],timeLimits:t[o.TIME_LIMITS]||[],dailyUsage:t[o.DAILY_USAGE]||{},pomodoro:t[o.POMODORO_STATUS]||{state:"IDLE",timeRemaining:0,currentCycle:0,config:m},siteCustomizations:t[o.SITE_CUSTOMIZATIONS]||{},settings:a[o.SETTINGS]||L}}async function W(e,t){switch(e.type){case"GET_INITIAL_STATE":return await D();case"ADD_TO_BLACKLIST":return await v(e.payload.domain),{success:!0};case"REMOVE_FROM_BLACKLIST":return await V(e.payload.domain),{success:!0};case"START_POMODORO":return await J(e.payload),{success:!0};case"STOP_POMODORO":return await X(),{success:!0};case"SET_TIME_LIMIT":return await F(e.payload.domain,e.payload.limitMinutes),{success:!0};case"CONTENT_ANALYSIS_RESULT":return await $(e.payload),{success:!0};case"UPDATE_SETTINGS":{const{[o.SETTINGS]:i}=await chrome.storage.sync.get(o.SETTINGS),n={...i??{},...e.payload};return await chrome.storage.sync.set({[o.SETTINGS]:n}),await l(),{success:!0}}case"SITE_CUSTOMIZATION_UPDATED":{const{[o.SITE_CUSTOMIZATIONS]:i}=await chrome.storage.local.get(o.SITE_CUSTOMIZATIONS),n={...i??{},...e.payload};return await chrome.storage.local.set({[o.SITE_CUSTOMIZATIONS]:n}),await l(),{success:!0}}case"STATE_UPDATED":return console.warn("[v0] Received a 'STATE_UPDATED' message from a client, which should not happen."),{success:!1,error:"Invalid message type received."};case"TOGGLE_ZEN_MODE":{const[i]=await chrome.tabs.query({active:!0,currentWindow:!0});if(i?.id)try{await chrome.tabs.sendMessage(i.id,{type:"TOGGLE_ZEN_MODE",payload:e.payload})}catch(n){console.warn(`[v0] Could not send message to tab ${i.id}. It might be a protected page or the content script is not injected.`,n)}return{success:!0}}default:const a=e.type;throw new Error(`Unknown message type: ${a}`)}}const I=1e3,d=2e3,M=1e3,Z=e=>{const t=[...e].reduce((a,i)=>a*31+i.charCodeAt(0)>>>0,0);return d+t%M};let S=Promise.resolve();function A(e){return S=S.then(e,e),S}async function j(){console.log("[v0] Initializing blocker module");const t=(await chrome.storage.local.get(o.BLACKLIST))[o.BLACKLIST]??[];await p(t)}async function v(e){const a=(await chrome.storage.local.get(o.BLACKLIST))[o.BLACKLIST]??[],i=u(e);if(!i)return;if(a.some(r=>r.domain===i)){console.log("[v0] Domain already in blacklist:",i);return}const n={domain:i,addedAt:Date.now()},s=[...a,n];await chrome.storage.local.set({[o.BLACKLIST]:s}),await p(s),await l(),console.log("[v0] Added to blacklist:",i)}async function V(e){const a=(await chrome.storage.local.get(o.BLACKLIST))[o.BLACKLIST]??[],i=u(e);if(!i)return;const n=a.filter(s=>s.domain!==i);await chrome.storage.local.set({[o.BLACKLIST]:n}),await p(n),await l(),console.log("[v0] Removed from blacklist:",i)}async function p(e){const a=(await chrome.declarativeNetRequest.getDynamicRules()).map(n=>n.id).filter(n=>n>=d&&n<d+M),i=e.map(n=>{const s=u(n.domain);return{id:Z(s),priority:1,action:{type:chrome.declarativeNetRequest.RuleActionType.BLOCK},condition:{urlFilter:`||${s}`,resourceTypes:[chrome.declarativeNetRequest.ResourceType.MAIN_FRAME]}}});await A(()=>chrome.declarativeNetRequest.updateDynamicRules({removeRuleIds:a,addRules:i})),console.log("[v0] User blocking rules synced:",i.length,"rules added,",a.length,"rules removed.")}async function H(){const{[o.BLACKLIST]:e=[]}=await chrome.storage.local.get(o.BLACKLIST);if(e.length===0){console.log("[v0] No sites in blacklist to block for Pomodoro.");return}const a=(await chrome.declarativeNetRequest.getDynamicRules()).map(n=>n.id).filter(n=>n>=I&&n<d),i=e.map((n,s)=>({id:I+s,priority:2,action:{type:chrome.declarativeNetRequest.RuleActionType.BLOCK},condition:{urlFilter:`||${u(n.domain)}`,resourceTypes:[chrome.declarativeNetRequest.ResourceType.MAIN_FRAME]}}));await A(()=>chrome.declarativeNetRequest.updateDynamicRules({removeRuleIds:a,addRules:i})),console.log("[v0] Enabling Pomodoro blocking for",e.length,"sites.")}async function C(){const t=(await chrome.declarativeNetRequest.getDynamicRules()).map(a=>a.id).filter(a=>a>=I&&a<d);t.length>0&&(await A(()=>chrome.declarativeNetRequest.updateDynamicRules({removeRuleIds:t})),console.log("[v0] Pomodoro blocking disabled. Removed",t.length,"rules."))}async function Q(){console.log("[v0] Initializing Pomodoro module"),chrome.alarms.onAlarm.addListener(async e=>{e.name===c.POMODORO&&await ee()})}async function J(e){const{[o.POMODORO_STATUS]:t}=await chrome.storage.local.get(o.POMODORO_STATUS),a={...t?.config||m,...e},i={state:"FOCUS",startTime:Date.now(),timeRemaining:a.focusMinutes*60,currentCycle:(t?.currentCycle||0)+1,config:a};await chrome.storage.local.set({[o.POMODORO_STATUS]:i}),await chrome.alarms.create(c.POMODORO,{delayInMinutes:a.focusMinutes}),await H(),await l(),a.notificationsEnabled&&chrome.notifications.create("pomodoro-start",{type:"basic",iconUrl:"icons/icon48.png",title:"Pomodoro Iniciado",message:`Foco por ${a.focusMinutes} minutos. Mantenha o foco!`}),console.log("[v0] Pomodoro started:",i)}async function X(){const{[o.POMODORO_STATUS]:e}=await chrome.storage.local.get(o.POMODORO_STATUS),t={state:"IDLE",timeRemaining:0,currentCycle:0,config:e?.config||m,startTime:void 0};await chrome.storage.local.set({[o.POMODORO_STATUS]:t}),await chrome.alarms.clear(c.POMODORO),await C(),await l(),console.log("[v0] Pomodoro stopped")}async function ee(){const{[o.POMODORO_STATUS]:e}=await chrome.storage.local.get(o.POMODORO_STATUS);if(e){if(e.state==="FOCUS"){const a=e.currentCycle%e.config.cyclesBeforeLongBreak===0?e.config.longBreakMinutes:e.config.breakMinutes,i={...e,state:"BREAK",startTime:Date.now(),timeRemaining:a*60};await chrome.storage.local.set({[o.POMODORO_STATUS]:i}),await chrome.alarms.create(c.POMODORO,{delayInMinutes:a}),await C(),await l(),e.config.notificationsEnabled&&chrome.notifications.create("pomodoro-break",{type:"basic",iconUrl:"icons/icon48.png",title:"Pausa!",message:`Descanse por ${a} minutos. Você merece!`}),console.log("[v0] Pomodoro: Focus → Break")}else if(e.state==="BREAK"){e.config.adaptiveMode&&e.currentCycle%e.config.cyclesBeforeLongBreak===0&&(e.config.focusMinutes+=5,console.log("[v0] Adaptive mode: Focus time increased to",e.config.focusMinutes));const t={...e,state:"IDLE",timeRemaining:0,startTime:void 0};await chrome.storage.local.set({[o.POMODORO_STATUS]:t}),await l(),e.config.notificationsEnabled&&chrome.notifications.create("pomodoro-cycle-complete",{type:"basic",iconUrl:"icons/icon48.png",title:"Ciclo Completo!",message:"Pronto para outra sessão de foco?"}),console.log("[v0] Pomodoro: Break → Idle")}}}async function te(){console.log("[v0] Initializing Firebase sync module");const{[o.SETTINGS]:e}=await chrome.storage.sync.get(o.SETTINGS);if(!e?.analyticsConsent){console.log("[v0] Analytics consent not given, skipping Firebase sync");return}await chrome.alarms.create(c.DAILY_SYNC,{periodInMinutes:1440}),chrome.alarms.onAlarm.addListener(async t=>{t.name===c.DAILY_SYNC&&await ae()})}async function ae(){console.log("[v0] Daily sync triggered (Firebase integration pending)");const{[o.DAILY_USAGE]:e={}}=await chrome.storage.local.get(o.DAILY_USAGE),t=new Date().toISOString().split("T")[0],a=e[t];if(!a)return;const i=Object.values(a).reduce((s,r)=>s+r,0),n=Object.entries(a).sort(([,s],[,r])=>r-s).slice(0,5).map(([s,r])=>({domain:s,time:r}));console.log("[v0] Daily summary:",{totalTime:i,topSites:n})}console.log("[v0] Service Worker starting up...");async function b(){await Q(),await j(),await B(),await k(),await q(),await te()}chrome.runtime.onInstalled.addListener(async e=>{if(console.log("[v0] Extension installed/updated:",e.reason),e.reason==="install"){const t={blacklist:[],timeLimits:[],dailyUsage:{},siteCustomizations:{},settings:L},a={state:"IDLE",timeRemaining:0,currentCycle:0,config:m};await chrome.storage.local.set({[o.BLACKLIST]:t.blacklist,[o.TIME_LIMITS]:t.timeLimits,[o.DAILY_USAGE]:t.dailyUsage,[o.SITE_CUSTOMIZATIONS]:t.siteCustomizations,[o.POMODORO_STATUS]:a}),await chrome.storage.sync.set({[o.SETTINGS]:t.settings}),console.log("[v0] Initial state created")}if(e.reason==="update"){console.log("[v0] Re-injecting content scripts after update.");const t=await chrome.tabs.query({url:["http://*/*","https://*/*"]});for(const a of t)if(a.id)try{await chrome.scripting.executeScript({target:{tabId:a.id},files:["content.js"]})}catch(i){console.warn(`[v0] Failed to re-inject script into tab ${a.id}:`,i)}}await b()});chrome.runtime.onStartup.addListener(async()=>{console.log("[v0] Extension started on browser startup"),await b()});chrome.runtime.onMessage.addListener((e,t,a)=>(console.log("[v0] Message received:",e?.type,e?.payload),W(e).then(a).catch(i=>{console.error("[v0] Error handling message:",i),a({error:i?.message??String(i)})}),!0));chrome.notifications.onButtonClicked.addListener(async(e,t)=>{if(console.log("[v0] Notification button clicked:",e,t),e.startsWith("suggest-block-")&&t===0){const a=e.replace("suggest-block-","");a&&(await v(a),console.log(`[v0] Added ${a} to blacklist from notification.`))}chrome.notifications.clear(e)});console.log("[v0] Service Worker loaded and listeners attached.");
